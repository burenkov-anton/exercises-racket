---

name: Сокращенный синтаксис создания функции
theory: |

  Создание функций - настолько частая операция, что в Racket была добавлена сокращенная версия определения (с одновременным объявлением) функции с помощью `define`. Возьмем для примера определение функции возведения в квадрат:

  ```scheme
  (define square (lambda (n) (* n n)))
  ```

  А теперь посмотрим сокращенную версию этого же определения:

  ```scheme
  (define (square n) (* n n))
  (square 3) ; 9
  ```

  Первое что бросается в глаза - отсутствие слова `lambda`. Вместо него, после `define` указыватеся список, в котором первый элемент это имя функции, остальные - параметры. Затем идет тело функции. Объявленная выше функция возведения в квадрат принимает один аргумент - `n`. Пример объявления функции с двумя аргументами:

  ```scheme
  (define (sum x y) (+ x y))
  (sum 3 5) ; 8
  ```

  Несмотря на наличие такого вида записи объявлений функций, нужно не забывать, что в Racket нет именованных функций. `define`, это всегда сопоставление имени со значением, но в роли последнего может выступать и функция.

instructions: |

  Создайте функцию с именем `sum-of-squares` (используя короткий синтаксис), которая находит сумму квадратов двух чисел.

  ```scheme
  (sum-of-squares 2 3) ; 13
  ```

definitions: []
